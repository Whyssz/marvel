{"version":3,"file":"static/js/548.5718df77.chunk.js","mappings":"8OAyEA,EAjEmB,WACjB,OAAoCA,EAAAA,EAAAA,UAAS,IAA7C,eAAOC,EAAP,KAAmBC,EAAnB,KACA,GAA4BF,EAAAA,EAAAA,UAAS,KAArC,eAAOG,EAAP,KAAeC,EAAf,KACA,GAA4CJ,EAAAA,EAAAA,WAAS,GAArD,eAAOK,EAAP,KAAwBC,EAAxB,KACA,GAAsCN,EAAAA,EAAAA,WAAS,GAA/C,eAAOO,EAAP,KAAoBC,EAApB,KAEA,GAA8CC,EAAAA,EAAAA,KAAtCC,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,WAAYC,EAA7B,EAA6BA,cAE7BC,EAAAA,EAAAA,YAAU,WACRC,EAAUX,GAAQ,EACnB,GAAC,IAEF,IAAMW,EAAY,SAACX,EAAQY,GACfT,GAAVS,GAEAH,EAAaT,GAAQa,KAAKC,GAAgBD,MAAK,kBAAML,EAAW,YAAjB,GAChD,EAEKM,EAAiB,SAACC,GACtB,IAAIC,GAAQ,EACRD,EAAUE,OAAS,IACrBD,GAAQ,GAGVjB,GAAc,SAACD,GAAD,wBAAoBA,IAApB,OAAmCiB,GAAnC,IACdZ,GAAiB,GACjBF,GAAU,SAACD,GAAD,OAAYA,EAAS,CAArB,IACVK,EAAeW,EAChB,EAsBD,OACE,iBAAKE,UAAU,eAAf,WACGC,EAAAA,EAAAA,GAAeZ,GAAS,kBAtB9B,SAAqBa,GAClB,IAAMC,EAAQD,EAAIE,KAAI,SAACC,EAAMC,GAC3B,OACE,eAAIN,UAAU,eAAd,UACE,UAAC,KAAD,CAAMO,GAAE,kBAAaF,EAAKG,IAA1B,WACE,gBACEC,IAAKJ,EAAKK,UACVC,IAAKN,EAAKO,MACVZ,UAAU,sBAEZ,gBAAKA,UAAU,oBAAf,SAAoCK,EAAKO,SACzC,gBAAKZ,UAAU,qBAAf,SAAqCK,EAAKQ,YARZP,EAYrC,IAED,OAAO,eAAIN,UAAU,eAAd,SAA8BG,GACtC,CAIkCW,CAAYlC,EAAlB,GAA+BI,IACxD,mBACE+B,SAAU/B,EACVgC,MAAO,CAAEC,QAAS/B,EAAc,OAAS,SACzCc,UAAU,mCACVkB,QAAS,kBAAMzB,EAAUX,EAAhB,EAJX,UAME,gBAAKkB,UAAU,QAAf,2BAIP,ECrDD,EAbmB,WACjB,OACE,iCACE,UAACmB,EAAA,EAAD,YACE,iBAAMC,KAAK,cAAcC,QAAQ,kCACjC,+CAEF,SAACC,EAAA,EAAD,KACA,SAAC,EAAD,MAGL,C,iFCZc,SAASC,EAAmBrB,GACzC,OCJa,SAA4BA,GACzC,GAAIsB,MAAMC,QAAQvB,GAAM,OAAO,EAAAwB,EAAA,GAAiBxB,EAClD,CDES,CAAkBA,IELZ,SAA0ByB,GACvC,GAAsB,qBAAXC,QAAmD,MAAzBD,EAAKC,OAAOC,WAA2C,MAAtBF,EAAK,cAAuB,OAAOH,MAAMM,KAAKH,EACtH,CFGmC,CAAgBzB,KAAQ,EAAA6B,EAAA,GAA2B7B,IGLvE,WACb,MAAM,IAAI8B,UAAU,uIACtB,CHG8F,EAC9F,C","sources":["components/comicsList/ComicsList.js","components/pages/ComicsPage.js","../node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport { setContentUnic } from '../../utils/setContent';\nimport useMarvelService from '../../services/MarvelService';\n\nimport './comicsList.scss';\n\nconst ComicsList = () => {\n  const [comicsList, setComicsList] = useState([]);\n  const [offset, setOffset] = useState(200);\n  const [newItemsLoading, setNewItemLoadng] = useState(false);\n  const [comicsEnded, setComicsEnded] = useState(false);\n\n  const { process, setProcess, getAllComics } = useMarvelService();\n\n  useEffect(() => {\n    onRequest(offset, true);\n  },[]);\n\n  const onRequest = (offset, initial) => {\n    initial ? setNewItemLoadng(false) : setNewItemLoadng(true);\n\n    getAllComics(offset).then(onLoadedComics).then(() => setProcess('confirmed'));\n  };\n\n  const onLoadedComics = (newComics) => {\n    let ended = false;\n    if (newComics.length < 8) {\n      ended = true;\n    }\n\n    setComicsList((comicsList) => [...comicsList, ...newComics]);\n    setNewItemLoadng(false);\n    setOffset((offset) => offset + 8);\n    setComicsEnded(ended);\n  };\n\n\tfunction renderItems(arr) {\n    const items = arr.map((item, i) => {\n      return (\n        <li className=\"comics__item\" key={i}>\n          <Link to={`/comics/${item.id}`}>\n            <img\n              src={item.thumbnail}\n              alt={item.title}\n              className=\"comics__item-img\"\n            />\n            <div className=\"comics__item-name\">{item.title}</div>\n            <div className=\"comics__item-price\">{item.price}</div>\n          </Link>\n        </li>\n      );\n    });\n\n    return <ul className=\"comics__grid\">{items}</ul>;\n  }\n\n  return (\n    <div className=\"comics__list\">\n      {setContentUnic(process, () => renderItems(comicsList), newItemsLoading)}\n      <button\n        disabled={newItemsLoading}\n        style={{ display: comicsEnded ? 'none' : 'block' }}\n        className=\"button button__main button__long\"\n        onClick={() => onRequest(offset)}\n      >\n        <div className=\"inner\">load more</div>\n      </button>\n    </div>\n  );\n};\n\nexport default ComicsList;\n","import { Helmet } from 'react-helmet';\r\n\r\nimport AppBanner from '../appBanner/AppBanner';\r\nimport ComicsList from '../comicsList/ComicsList';\r\n\r\nconst ComicsPage = () => {\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <meta name=\"description\" content=\"Page with list of our comics\" />\r\n        <title>Comics Page</title>\r\n      </Helmet>\r\n      <AppBanner />\r\n      <ComicsList />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ComicsPage;\r\n","import arrayWithoutHoles from \"./arrayWithoutHoles.js\";\nimport iterableToArray from \"./iterableToArray.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableSpread from \"./nonIterableSpread.js\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}"],"names":["useState","comicsList","setComicsList","offset","setOffset","newItemsLoading","setNewItemLoadng","comicsEnded","setComicsEnded","useMarvelService","process","setProcess","getAllComics","useEffect","onRequest","initial","then","onLoadedComics","newComics","ended","length","className","setContentUnic","arr","items","map","item","i","to","id","src","thumbnail","alt","title","price","renderItems","disabled","style","display","onClick","Helmet","name","content","AppBanner","_toConsumableArray","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","from","unsupportedIterableToArray","TypeError"],"sourceRoot":""}