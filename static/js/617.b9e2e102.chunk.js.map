{"version":3,"file":"static/js/617.b9e2e102.chunk.js","mappings":"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","sources":["components/errorMessage/ErrorMessage.js","components/randomChar/RandomChar.js","components/charList/CharList.js","components/charInfo/CharInfo.js","components/errorBoundary/ErrorBoundary.js","components/appSearch/AppSearch.js","components/pages/MainPage.js","services/MarvelService.js","hooks/http.hook.js","components/skeleton/Skeleton.js","utils/setContent.js"],"sourcesContent":["import img from './error.gif';\r\n\r\nconst ErrorMessage = () => {\r\n  return (\r\n    <img\r\n      style={{\r\n        display: 'block',\r\n        width: '250px',\r\n        height: '250px',\r\n        objectFit: 'contain',\r\n        margin: '0 auto',\r\n      }}\r\n      src={img}\r\n      alt=\"error\"\r\n    ></img>\r\n    // <img src={process.env.PUBLIC_URL + '/error.gif'} alt=\"error\" />\r\n  );\r\n};\r\n\r\nexport default ErrorMessage;\r\n","import { useState, useEffect } from 'react';\nimport { CSSTransition } from 'react-transition-group';\n\nimport useMarvelService from '../../services/MarvelService';\nimport mjolnir from '../../resources/img/mjolnir.png';\nimport { setContent } from '../../utils/setContent';\n\nimport './randomChar.scss';\nimport '../../style/style.scss';\n\nconst RandomChar = () => {\n  const [char, setChar] = useState(null);\n  const { getCharacter, clearError, process, setProcess } = useMarvelService();\n\n  useEffect(() => {\n    updateChar();\n\n    const timerId = setInterval(updateChar, 60000);\n    return () => {\n      clearInterval(timerId);\n    };\n  }, []);\n\n  const onCharLoaded = (char) => {\n    setChar(char);\n  };\n\n  const updateChar = () => {\n    clearError();\n    const id = Math.floor(Math.random() * (1011400 - 1011000)) + 1011000;\n    getCharacter(id).then(onCharLoaded).then(() => setProcess('confirmed'));\n  };\n\n\n  return (\n    <div className=\"randomchar\">\n      {setContent(process, View, char)}\n      <div className=\"randomchar__static\">\n        <p className=\"randomchar__title\">\n          Random character for today!\n          <br />\n          Do you want to get to know him better?\n        </p>\n        <p className=\"randomchar__title\">Or choose another one</p>\n        <button onClick={updateChar} className=\"button button__main\">\n          <div className=\"inner\">try it</div>\n        </button>\n        <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\" />\n      </div>\n    </div>\n  );\n};\n\nconst View = ({ data }) => {\n  const { name, description, thumbnail, wiki, homepage } = data;\n  const filterImg = thumbnail.indexOf('image_not_available') > 0;\n  const stylez = filterImg ? { objectFit: 'fill' } : null;\n\n  const [show, setShow] = useState(false);\n\n  useEffect(() => {\n    setShow(true);\n  }, [data]);\n\n  return (\n    <CSSTransition\n      in={show}\n      timeout={600}\n      classNames=\"randomize\"\n      mountOnEnter\n      unmountOnExit\n    >\n      <div className=\"randomchar__block\">\n        <img\n          style={stylez}\n          src={thumbnail}\n          alt=\"Random character\"\n          className=\"randomchar__img\"\n        />\n        <div className=\"randomchar__info\">\n          <p className=\"randomchar__name\">{name}</p>\n          <p className=\"randomchar__descr\">{description}</p>\n          <div className=\"randomchar__btns\">\n            <a href={homepage} className=\"button button__main\">\n              <div className=\"inner\">homepage</div>\n            </a>\n            <a href={wiki} className=\"button button__secondary\">\n              <div className=\"inner\">Wiki</div>\n            </a>\n          </div>\n        </div>\n      </div>\n    </CSSTransition>\n  );\n};\n\nexport default RandomChar;\n","import { useState, useEffect, useRef, useMemo } from 'react';\nimport { useScrollBy } from 'react-use-window-scroll';\nimport PropTypes from 'prop-types';\n\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\nimport useMarvelService from '../../services/MarvelService';\nimport { setContentUnic } from '../../utils/setContent';\nimport './charList.scss';\nimport '../../style/style.scss';\n\nconst CharList = (props) => {\n  const [chars, setChars] = useState([]);\n  const [offset, setOffset] = useState(1041);\n  const [newItemsLoading, setNewItemLoadng] = useState(false);\n  const [charEnded, setCharEnded] = useState(false);\n  const scrollBy = useScrollBy();\n\n  const { process, setProcess, getAllCharacters } = useMarvelService();\n\n  useEffect(() => {\n    onRequest(offset, true);\n  }, []);\n\n  const onRequest = (offset, initial) => {\n    if (initial) {\n      setNewItemLoadng(false);\n    } else {\n      setNewItemLoadng(true);\n      setTimeout(\n        () => scrollBy({ top: 800, left: 0, behavior: 'smooth' }),\n        600\n      );\n    }\n    getAllCharacters(offset)\n      .then(onLoadedChars)\n      .then(() => setProcess('confirmed'));\n  };\n\n  const onLoadedChars = (newCharList) => {\n    let ended = false;\n    if (newCharList.length < 9) {\n      ended = true;\n    }\n\n    setChars((chars) => [...chars, ...newCharList]);\n    setNewItemLoadng(false);\n    setOffset((offset) => offset + 9);\n    setCharEnded(ended);\n  };\n\n  const itemsRefs = useRef([]);\n\n  const onChoiseItem = (id) => {\n    itemsRefs.current.forEach((item) =>\n      item.classList.remove('char__item_selected')\n    );\n    itemsRefs.current[id].classList.add('char__item_selected');\n    itemsRefs.current[id].focus();\n  };\n\n  function renderList(chars) {\n    const list = chars.map(({ name, id, thumbnail }, index) => {\n      const filterImg = thumbnail.indexOf('image_not_available') > 0;\n      const stylez = filterImg ? { objectFit: 'fill' } : null;\n\n      return (\n        <CSSTransition key={id} timeout={600} classNames=\"char__item\">\n          <li\n            className=\"char__item\"\n            tabIndex={0}\n            ref={(el) => (itemsRefs.current[index] = el)}\n            onClick={() => {\n              props.onChangeSelected(id);\n              onChoiseItem(index);\n            }}\n            onKeyDown={(e) => {\n              if (e.key === ' ' || e.key === 'Enter') {\n                props.onChangeSelected(id);\n                onChoiseItem(index);\n              }\n            }}\n          >\n            <img src={thumbnail} alt={name} style={stylez} />\n            <div className=\"char__name\">{name}</div>\n          </li>\n        </CSSTransition>\n      );\n    });\n\n    return (\n      <ul className=\"char__grid\">\n        <TransitionGroup component={null}>{list}</TransitionGroup>\n      </ul>\n    );\n  }\n\n  const result = useMemo(() => {\n    return setContentUnic(process, () => renderList(chars), newItemsLoading);\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [process]);\n\n  return (\n    <div className=\"char__list\">\n      {result}\n      <button\n        disabled={newItemsLoading}\n        style={{ display: charEnded ? 'none' : 'block' }}\n        onClick={() => onRequest(offset)}\n        className=\"button button__main button__long\"\n      >\n        <div className=\"inner\">load more</div>\n      </button>\n    </div>\n  );\n};\n\nCharList.propTypes = {\n  onChangeSelected: PropTypes.func.isRequired,\n};\n\nexport default CharList;\n","import { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport { setContent } from '../../utils/setContent';\nimport useMarvelServices from '../../services/MarvelService';\nimport './charInfo.scss';\n\nconst CharInfo = (props) => {\n  const [char, setChar] = useState(null);\n\n  const { getCharacter, clearError, process, setProcess } = useMarvelServices();\n\n  useEffect(() => {\n    updateChar();\n  }, [props.charId]);\n\n  const updateChar = () => {\n    const { charId } = props;\n    if (!charId) return;\n\n    clearError();\n\n    getCharacter(charId)\n      .then(onCharLoaded)\n      .then(() => setProcess('confirmed'));\n  };\n\n  const onCharLoaded = (char) => {\n    setChar(char);\n  };\n\n  return <div className=\"char__info\">{setContent(process, View, char)}</div>;\n};\n\nconst View = ({ data }) => {\n  const { name, description, thumbnail, wiki, homepage, comics } = data;\n  const filterImg = thumbnail.indexOf('image_not_available') > 0;\n  const stylez = filterImg ? { objectFit: 'fill' } : null;\n  const styelList = comics.length > 5 ? { height: '340px' } : null;\n\n  return (\n    <>\n      <div className=\"char__basics\">\n        <img style={stylez} src={thumbnail} alt={name} />\n        <div>\n          <div className=\"char__info-name\">{name}</div>\n          <div className=\"char__btns\">\n            <a href={homepage} className=\"button button__main\">\n              <div className=\"inner\">homepage</div>\n            </a>\n            <a href={wiki} className=\"button button__secondary\">\n              <div className=\"inner\">wiki</div>\n            </a>\n          </div>\n        </div>\n      </div>\n      <div className=\"char__descr\">{description}</div>\n      <div className=\"char__comics\">Comics:</div>\n      <ul className=\"char__comics-list\" style={styelList}>\n        {comics.length > 0 ? null : 'There is no comics with this character'}\n        {comics.map((item, i) => {\n          return (\n            <Link\n              to={`comics/${item.resourceURI.slice(-5)}`}\n              className=\"char__comics-item\"\n              key={i}\n            >\n              {item.name}\n            </Link>\n          );\n        })}\n      </ul>\n    </>\n  );\n};\n\nexport default CharInfo;\n","import { Component } from 'react';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\n\r\nclass ErrorBoundary extends Component {\r\n  state = {\r\n    error: false,\r\n  };\r\n\r\n  componentDidCatch(error, errorInfo) {\r\n    console.log(error, errorInfo);\r\n    this.setState({ error: true });\r\n  }\r\n\r\n  render() {\r\n    if (this.state.error) {\r\n      return <ErrorMessage/>\r\n    }\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n","import * as Yup from 'yup';\r\nimport { useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport {\r\n  Formik,\r\n  Form,\r\n  Field,\r\n  ErrorMessage as FormikErrorMessage,\r\n} from 'formik';\r\n\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\n\r\nimport './appSearch.scss';\r\nimport Amerika from '../../resources/img/america.png';\r\nimport Spider from '../../resources/img/spider.png';\r\nimport Iron from '../../resources/img/iron.png';\r\nimport Wolver from '../../resources/img/ras.png';\r\n\r\nconst linksData = [\r\n  { name: 'iron', link: 1009368 },\r\n  { name: 'amerika', link: 1009220 },\r\n  { name: 'wolver', link: 1009718 },\r\n  { name: 'spider', link: false },\r\n];\r\n\r\nconst AppSearch = () => {\r\n  const [char, setChar] = useState(null);\r\n\r\n  const { clearError, getCharacterByName, process, setProcess } = useMarvelService();\r\n\r\n  const onCharLoaded = (char) => {\r\n    setChar(char);\r\n  };\r\n\r\n  const updateChar = (name) => {\r\n    clearError();\r\n\r\n    getCharacterByName(name).then(onCharLoaded).then(() => setProcess('confirmed'));\r\n  };\r\n\r\n  const links = linksData.map((item, i) => {\r\n    let name = '';\r\n\r\n    switch (item.name) {\r\n      case 'iron':\r\n        name = Iron;\r\n        break;\r\n      case 'amerika':\r\n        name = Amerika;\r\n        break;\r\n      case 'wolver':\r\n        name = Wolver;\r\n        break;\r\n      case 'spider':\r\n        name = Spider;\r\n        break;\r\n      default:\r\n        name = false;\r\n        break;\r\n    }\r\n\r\n    return item.link ? (\r\n      <Link to={`characters/${item.link}`} className=\"bord-link__char\" key={i}>\r\n        <img src={name} alt={`Hero - ${item.name}`} />\r\n      </Link>\r\n    ) : (\r\n      <div className=\"bord-link__char broken-link\" key={i}>\r\n        <img src={name} alt={`Hero - ${item.name}`} />\r\n      </div>\r\n    );\r\n  });\r\n\r\n  const errorMessage = process !== 'error' ? null : (\r\n    <div className=\"char__search-critical-error\">\r\n      <ErrorMessage />\r\n    </div>\r\n  );\r\n\r\n  const result = !char ? null : char.length > 0 ? (\r\n    <div className=\"result-wrapper\">\r\n      <Link\r\n        to={`/characters/${char[0].id}`}\r\n        className=\"result-wrapper__search success-search\"\r\n      >\r\n        {`There is! Visit ${char[0].name} page?`}\r\n      </Link>\r\n    </div>\r\n  ) : (\r\n    <div className=\"result-wrapper__search error-search\">\r\n      The character was not found. Check the name and try again\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <Formik\r\n        initialValues={{\r\n          charName: 'Hulk',\r\n        }}\r\n        validationSchema={Yup.object({\r\n          charName: Yup.string().required('This field is required'),\r\n        })}\r\n        onSubmit={({ charName }) => {\r\n          updateChar(charName);\r\n        }}\r\n      >\r\n        <Form className=\"app__form-search\">\r\n          <div className=\"bord-link\">{links}</div>\r\n          <h2>Or find a character by name:</h2>\r\n          <div className=\"app__wrapper-search\">\r\n            <Field\r\n              id=\"charName\"\r\n              name=\"charName\"\r\n              type=\"text\"\r\n              placeholder=\"Enter name\"\r\n            />\r\n            <button\r\n              className=\"button button__main\"\r\n              type=\"submit\"\r\n              disabled={process === 'loading'}\r\n            >\r\n              <div className=\"inner\">FIND</div>\r\n            </button>\r\n          </div>\r\n          <FormikErrorMessage\r\n            component=\"div\"\r\n            className=\"char__search-error\"\r\n            name=\"charName\"\r\n          />\r\n          {result}\r\n          {errorMessage}\r\n        </Form>\r\n      </Formik>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AppSearch;\r\n","import { useState } from 'react';\r\nimport { Helmet } from 'react-helmet';\r\nimport RandomChar from '../randomChar/RandomChar';\r\nimport CharList from '../charList/CharList';\r\nimport CharInfo from '../charInfo/CharInfo';\r\nimport ErrorBoundary from '../errorBoundary/ErrorBoundary';\r\nimport decoration from '../../resources/img/vision.png';\r\nimport AppSearch from '../appSearch/AppSearch';\r\n\r\nconst MainPage = () => {\r\n  const [selectedChar, setChar] = useState(null);\r\n\r\n  const onChangeSelected = (id) => {\r\n    setChar(id);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <meta name=\"description\" content=\"Marvel information portal\" />\r\n        <title>Marvel information portal</title>\r\n      </Helmet>\r\n      <ErrorBoundary>\r\n        <RandomChar />\r\n      </ErrorBoundary>\r\n      <ErrorBoundary>\r\n        <AppSearch />\r\n      </ErrorBoundary>\r\n      <div className=\"char__content\">\r\n        <ErrorBoundary>\r\n          <CharList onChangeSelected={onChangeSelected} />\r\n        </ErrorBoundary>\r\n        <ErrorBoundary>\r\n          <CharInfo charId={selectedChar} />\r\n        </ErrorBoundary>\r\n      </div>\r\n      <img className=\"bg-decoration\" src={decoration} alt=\"vision\" />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MainPage;\r\n","import { useHttp } from '../hooks/http.hook';\r\n\r\nconst useMarvelService = () => {\r\n  const { request, clearError, process, setProcess } = useHttp();\r\n\r\n  const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n  const _apiKey = 'apikey=6580aaf3f7ebb7dd34e71091f73f8943';\r\n  const _baseOfSet = 210;\r\n\r\n  const getAllCharacters = async (offset = _baseOfSet) => {\r\n    const res = await request(\r\n      `${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`\r\n    );\r\n    return res.data.results.map(_transformCharacter);\r\n  };\r\n\r\n  const getAllComics = async (offset = _baseOfSet) => {\r\n    const res = await request(\r\n      `${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`\r\n    );\r\n    return res.data.results.map(_transformComics);\r\n  };\r\n\r\n  const getCharacter = async (id) => {\r\n    const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n    return _transformCharacter(res.data.results[0]);\r\n  };\r\n\r\n  const getComic = async (id) => {\r\n    const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n    return _transformComics(res.data.results[0]);\r\n  };\r\n\r\n  const getCharacterByName = async (name) => {\r\n    const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n    return res.data.results.map(_transformCharacter);\r\n  };\r\n\r\n  const _transformComics = (comics) => {\r\n    return {\r\n      id: comics.id,\r\n      title: comics.title,\r\n      description: comics.description\r\n        ? `${comics.description.slice(0, 150)}...`\r\n        : \"The charecter doesn't have a description\",\r\n      thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\r\n      language: comics.textObjects.language || 'en-us',\r\n      price: comics.prices.price ? `${comics.prices.price}$` : 'not available',\r\n    };\r\n  };\r\n\r\n  const _transformCharacter = (char) => {\r\n    return {\r\n      id: char.id,\r\n      name: char.name,\r\n      fulldesc: char.description,\r\n      description: char.description\r\n        ? `${char.description.slice(0, 150)}...`\r\n        : \"The charecter doesn't have a description\",\r\n      thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n      homepage: char.urls[0].url,\r\n      wiki: char.urls[1].url,\r\n      comics: char.comics.items,\r\n    };\r\n  };\r\n\r\n  return {\r\n    process,\r\n    setProcess,\r\n    clearError,\r\n    getAllCharacters,\r\n    getCharacter,\r\n    getAllComics,\r\n    getComic,\r\n    getCharacterByName,\r\n  };\r\n};\r\n\r\nexport default useMarvelService;\r\n","import { useState, useCallback } from 'react';\r\n\r\nexport const useHttp = () => {\r\n  const [process, setProcess] = useState('waiting');\r\n\r\n  const request = useCallback(\r\n    async (\r\n      url,\r\n      method = 'GET',\r\n      body = null,\r\n      headers = { 'Content-Type': 'application/json' }\r\n    ) => {\r\n      setProcess('loading');\r\n\r\n      try {\r\n        const response = await fetch(url, { method, body, headers });\r\n\r\n        if (!response.ok) {\r\n          throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n        }\r\n\r\n        const data = await response.json();\r\n\r\n        return data;\r\n      } catch (e) {\r\n        setProcess('error');\r\n        throw e;\r\n      }\r\n    },\r\n    []\r\n  );\r\n\r\n  const clearError = useCallback(() => {\r\n    setProcess('loading');\r\n  }, []);\r\n\r\n  return { request, clearError, process, setProcess };\r\n};\r\n","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import ErrorMessage from '../components/errorMessage/ErrorMessage';\r\nimport Spinner from '../components/spinner/Spinner';\r\nimport Skeleton from '../components/skeleton/Skeleton';\r\n\r\nexport const setContent = (process, Component, data) => {\r\n  switch (process) {\r\n    case 'waiting':\r\n      return <Skeleton />;\r\n    case 'loading':\r\n      return <Spinner />;\r\n    case 'error':\r\n      return <ErrorMessage />;\r\n    case 'confirmed':\r\n      return <Component data={data} />;\r\n    default:\r\n      throw new Error('Unexpected process state');\r\n  }\r\n};\r\n\r\nexport const setContentUnic = (process, Component, newItemsLoading) => {\r\n  switch (process) {\r\n    case 'waiting':\r\n      return <Spinner />;\r\n    case 'loading':\r\n      return newItemsLoading ? <Component /> : <Spinner />;\r\n    case 'error':\r\n      return <ErrorMessage />;\r\n    case 'confirmed':\r\n      return <Component />;\r\n    default:\r\n      throw new Error('Unexpected process state');\r\n  }\r\n};\r\n\r\n// export default setContent;\r\n\r\n// const { loading, error, getCharacter, clearError } = useMarvelServices();\r\n\r\n// const skeleton = char || loading || error ? null : <Skeleton />;\r\n// const errorMessage = error ? <ErrorMessage /> : null;\r\n// const spinner = loading ? <Spinner /> : null;\r\n// const content = !(loading || error || !char) ? <View char={char} /> : null;"],"names":["style","display","width","height","objectFit","margin","src","img","alt","View","data","name","description","thumbnail","wiki","homepage","stylez","indexOf","useState","show","setShow","useEffect","CSSTransition","in","timeout","classNames","mountOnEnter","unmountOnExit","className","href","char","setChar","useMarvelService","getCharacter","clearError","process","setProcess","updateChar","timerId","setInterval","clearInterval","onCharLoaded","id","Math","floor","random","then","setContent","onClick","mjolnir","props","chars","setChars","offset","setOffset","newItemsLoading","setNewItemLoadng","charEnded","setCharEnded","scrollBy","useScrollBy","getAllCharacters","onRequest","initial","setTimeout","top","left","behavior","onLoadedChars","newCharList","ended","length","itemsRefs","useRef","onChoiseItem","current","forEach","item","classList","remove","add","focus","result","useMemo","setContentUnic","list","map","index","tabIndex","ref","el","onChangeSelected","onKeyDown","e","key","TransitionGroup","component","renderList","disabled","comics","styelList","i","to","resourceURI","slice","useMarvelServices","charId","ErrorBoundary","state","error","errorInfo","console","log","this","setState","ErrorMessage","children","Component","linksData","link","getCharacterByName","links","errorMessage","initialValues","charName","validationSchema","Yup","required","onSubmit","type","placeholder","selectedChar","Helmet","content","decoration","request","useCallback","url","method","body","headers","fetch","response","ok","Error","status","json","useHttp","_apiBase","_apiKey","_baseOfSet","res","results","_transformCharacter","getAllComics","_transformComics","getComic","title","path","extension","language","textObjects","price","prices","fulldesc","urls","items","Spinner"],"sourceRoot":""}